---
# Source: backend-api/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backend-api
  labels:
    helm.sh/chart: backend-api-0.1.0
    app.kubernetes.io/name: backend-api
    app.kubernetes.io/instance: backend-api
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: backend-api/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: backend-api
  labels:
    helm.sh/chart: backend-api-0.1.0
    app.kubernetes.io/name: backend-api
    app.kubernetes.io/instance: backend-api
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: backend-api
    app.kubernetes.io/instance: backend-api
---
# Source: backend-api/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api
  labels:
    helm.sh/chart: backend-api-0.1.0
    app.kubernetes.io/name: backend-api
    app.kubernetes.io/instance: backend-api
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: backend-api
      app.kubernetes.io/instance: backend-api
  template:
    metadata:
      labels:
        helm.sh/chart: backend-api-0.1.0
        app.kubernetes.io/name: backend-api
        app.kubernetes.io/instance: backend-api
        app.kubernetes.io/version: "1.16.0"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: backend-api
      containers:
        - name: backend-api
          image: "jinseok93338/backend-api-poc:v0.1.2"
          imagePullPolicy: IfNotPresent
          env:
            - name: PORT
              value: "3000"
            # Inject individual components from the secret first
            - name: PGHOST_FROM_SECRET
              valueFrom:
                secretKeyRef:
                  name: "be-db-postgresql"
                  key: postgres-host
                  optional: true
            - name: PGPORT_FROM_SECRET
              value: "5432"
            - name: PGDATABASE_FROM_SECRET
              value: "backend_db"
            - name: PGUSER_FROM_SECRET
              value: "postgres"
            - name: PGPASSWORD_FROM_SECRET
              valueFrom:
                secretKeyRef:
                  name: "be-db-postgresql"
                  key: postgres-password
            # Construct DATABASE_URL using values and secrets
            - name: DATABASE_URL
              value: "postgresql://$(PGUSER_FROM_SECRET):$(PGPASSWORD_FROM_SECRET)@be-db-postgresql.base-app.svc.cluster.local:5432/$(PGDATABASE_FROM_SECRET)"
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
---
# Source: backend-api/templates/ingressroute.yaml
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: backend-api
  namespace: base-app
  labels:
    helm.sh/chart: backend-api-0.1.0
    app.kubernetes.io/name: backend-api
    app.kubernetes.io/instance: backend-api
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  entryPoints:
    - web # Assuming the default Traefik entrypoint is 'web'
  routes:
    - match: PathPrefix(`/api`)
      kind: Rule
      services:
        - name: backend-api
          port: 3000
      middlewares:
        - name: backend-api-strip-prefix
          # namespace is not needed for middleware in the same namespace
          # namespace: base-app
---
# Source: backend-api/templates/ingressroute.yaml
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: backend-api-strip-prefix
  namespace: base-app
  labels:
    helm.sh/chart: backend-api-0.1.0
    app.kubernetes.io/name: backend-api
    app.kubernetes.io/instance: backend-api
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  stripPrefix:
    prefixes:
      - /api
    # forceSlash: false # Uncomment if needed
---
# Source: backend-api/templates/configmap-migrations.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-api-migrations
  labels:
    helm.sh/chart: backend-api-0.1.0
    app.kubernetes.io/name: backend-api
    app.kubernetes.io/instance: backend-api
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    # Ensure this CM is created before the migration job
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10" # Lower weight means run earlier
    "helm.sh/hook-delete-policy": before-hook-creation # Delete previous CM before creating new one
data:
  001_create_company_config_table.sql: "-- Create the company_config table if it doesn't
    exist\nCREATE TABLE IF NOT EXISTS company_config (\n    company_code VARCHAR(50)
    PRIMARY KEY,  -- Unique identifier for the company\n    logo_url VARCHAR(255),                --
    URL for the company's logo\n    -- Optional: Add timestamps for tracking\n    created_at
    TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP WITH
    TIME ZONE DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Optional: Add an index if you frequently
    query by company_code (PRIMARY KEY already creates one)\n-- CREATE INDEX IF NOT
    EXISTS idx_company_config_code ON company_config(company_code); "
---
# Source: backend-api/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "backend-api-test-connection"
  labels:
    helm.sh/chart: backend-api-0.1.0
    app.kubernetes.io/name: backend-api
    app.kubernetes.io/instance: backend-api
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['backend-api:3000']
  restartPolicy: Never
---
# Source: backend-api/templates/job-migration.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: backend-api-migration-job
  labels:
    helm.sh/chart: backend-api-0.1.0
    app.kubernetes.io/name: backend-api
    app.kubernetes.io/instance: backend-api
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: migration
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5" # Run before other hooks
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: backend-api-migration-runner
      labels:
        app.kubernetes.io/name: backend-api
        app.kubernetes.io/instance: backend-api
        app.kubernetes.io/component: migration
    spec:
      restartPolicy: Never
      containers:
        - name: migration-runner
          image: "postgres:15-alpine" # Use the image specified in values.yaml
          command: ["/bin/sh", "-c"]
          args:
            - |
              echo "Starting database migration..."
              # Loop through all SQL files mounted from the ConfigMap and execute them
              for file in /migrations/*.sql; do
                echo "Executing migration: $file"
                psql -v ON_ERROR_STOP=1 --host "$PGHOST" --port "$PGPORT" --username "$PGUSER" --dbname "$PGDATABASE" -f "$file"
              done
              echo "Database migration finished."
          env:
            # Read connection details from the specified secret
            - name: PGHOST
              value: "be-db-postgresql.base-app.svc.cluster.local"
            - name: PGPORT
              value: "5432"
            - name: PGDATABASE
              value: "backend_db"
            - name: PGUSER
              value: "postgres" # Use the default Bitnami username directly
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: "be-db-postgresql" # Secret name from values.yaml
                  key: postgres-password # Adjusted key name based on inspection
          volumeMounts:
            - name: migrations-volume
              mountPath: /migrations
      volumes:
        - name: migrations-volume
          configMap:
            name: backend-api-migrations # Mount the ConfigMap we created
  backoffLimit: 1 # Number of retries before marking the job as failed
